"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _spinalEnvViewerGraphService = require("spinal-env-viewer-graph-service");

var _spinalModelsBuildingElements = require("spinal-models-building-elements");

var _constants = require("./constants");

var constants = _interopRequireWildcard(_constants);

var _spinalCoreConnectorjs_type = require("spinal-core-connectorjs_type");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// import bimobjService from 'spinal-env-viewer-plugin-bimobjectservice';

const bimobjService = window.spinal.BimObjectService;

const GeographicContext = {
  constants: constants,

  /**
   * Returns the child type of the type given as parameter.
   * @param {string} parentType
   * @return {string} Child type
   */
  getChildType(parentType) {
    let parentTypeIndex = constants.GEOGRAPHIC_TYPES_ORDER.indexOf(parentType);

    if (parentTypeIndex === -1) {
      return "";
    }

    return constants.GEOGRAPHIC_TYPES_ORDER[parentTypeIndex + 1];
  },

  /**
   * It Takes as parameter a context name, returns true if a context with the same name does not exist, else returns false.
   * @param {string} contextName
   * @returns {Boolean}
   */
  createContext(contextName) {
    if (typeof contextName !== "string") {
      throw Error("contextName must be a string");
    }

    const context = _spinalEnvViewerGraphService.SpinalGraphService.getContext(contextName);

    if (typeof context !== "undefined") return context;

    return _spinalEnvViewerGraphService.SpinalGraphService.addContext(contextName, constants.CONTEXT_TYPE, new _spinalModelsBuildingElements.AbstractElement(contextName));
  },

  /**
   * This method takes as parameters a context (SpinalContext), a parent node (must be a SpinalNode) and a string representing the abstract element type;
   * @param {SpinalContext} context - The Context geographic
   * @param {SpinalNode} node - The parent Node
   * @param {string} elementName - The AbstactElement Name
   * @returns {Boolean}
   */
  addAbstractElement(context, node, elementName) {
    const parentType = node.type.get();
    const childType = this.getChildType(parentType);

    if (!childType) {
      throw Error(`${parentType} is not a valid type in geographic context`);
    }

    const childRelation = constants.MAP_TYPE_RELATION.get(childType);

    const childNode = _spinalEnvViewerGraphService.SpinalGraphService.createNode({
      name: elementName,
      type: childType
    }, new _spinalModelsBuildingElements.AbstractElement(elementName));
    _spinalEnvViewerGraphService.SpinalGraphService.addChildInContext(node.id.get(), childNode, context.id.get(), childRelation, _spinalEnvViewerGraphService.SPINAL_RELATION_TYPE);

    this.addToReferenceContext(childNode);

    return true;
  },

  /**
   * @param {string} contextId - The Context geographic Id
   * @param {string} parentId - The parent Node Id
   * @param {string} buildingName - Building Name
   */
  addBuilding(contextId, parentId, buildingName) {

    let nodeId = _spinalEnvViewerGraphService.SpinalGraphService.createNode({
      name: buildingName,
      type: constants.BUILDING_TYPE
    }, new _spinalModelsBuildingElements.AbstractElement(buildingName));

    this.addToReferenceContext(nodeId);

    return _spinalEnvViewerGraphService.SpinalGraphService.addChildInContext(parentId, nodeId, contextId, constants.BUILDING_RELATION, _spinalEnvViewerGraphService.SPINAL_RELATION_TYPE);
  },

  /**
   * @param {string} contextId - The Context geographic Id
   * @param {string} parentId - The parent Node Id
   * @param {string} floorName - the floor Name
   */
  addFloor(contextId, parentId, floorName) {

    let nodeId = _spinalEnvViewerGraphService.SpinalGraphService.createNode({
      name: floorName,
      type: constants.FLOOR_TYPE
    }, new _spinalModelsBuildingElements.AbstractElement(floorName));

    this.addToReferenceContext(nodeId);

    return _spinalEnvViewerGraphService.SpinalGraphService.addChildInContext(parentId, nodeId, contextId, constants.FLOOR_RELATION, _spinalEnvViewerGraphService.SPINAL_RELATION_TYPE);
  },

  /**
   * @param {string} contextId - The Context geographic Id
   * @param {string} parentId - The parent Node Id
   * @param {string} siteName - the site Name
   */
  addSite(contextId, parentId, siteName) {

    let nodeId = _spinalEnvViewerGraphService.SpinalGraphService.createNode({
      name: siteName,
      type: constants.SITE_TYPE
    }, new _spinalModelsBuildingElements.AbstractElement(siteName));

    this.addToReferenceContext(nodeId);

    return _spinalEnvViewerGraphService.SpinalGraphService.addChildInContext(parentId, nodeId, contextId, constants.SITE_RELATION, _spinalEnvViewerGraphService.SPINAL_RELATION_TYPE);
  },

  /**
   * @param {string} contextId - The Context geographic Id
   * @param {string} parentId - The parent Node Id
   * @param {string} zoneName - Zone name
   */
  addZone(contextId, parentId, zoneName) {
    let nodeId = _spinalEnvViewerGraphService.SpinalGraphService.createNode({
      name: zoneName,
      type: constants.ZONE_TYPE
    }, new _spinalModelsBuildingElements.AbstractElement(zoneName));

    this.addToReferenceContext(nodeId);

    return _spinalEnvViewerGraphService.SpinalGraphService.addChildInContext(parentId, nodeId, contextId, constants.ZONE_RELATION, _spinalEnvViewerGraphService.SPINAL_RELATION_TYPE);
  },

  /**
   * @param {string} contextId - The Context geographic
   * @param {string} parentId - The parent Node
   * @param {string} roomName - Room Name
   */
  addRoom(contextId, parentId, roomName) {
    let nodeId = _spinalEnvViewerGraphService.SpinalGraphService.createNode({
      name: roomName,
      type: constants.ROOM_TYPE
    }, new _spinalModelsBuildingElements.AbstractElement(roomName));

    this.addToReferenceContext(nodeId);

    return _spinalEnvViewerGraphService.SpinalGraphService.addChildInContext(parentId, nodeId, contextId, constants.ROOM_RELATION, _spinalEnvViewerGraphService.SPINAL_RELATION_TYPE);
  },

  /**
   * it uses bimObject service to add all dbIds passed as parameters.
   * the parameter dbIds can be a simple dbIds or a list of dbIds.
   * @param {SpinalContext} context - The Context geographic
   * @param {SpinalNode} node - The parent Node
   * @param {Number | Array<Number>} dbIds - Can be
   */
  addBimElement(context, node, dbIds, model) {

    if (!Array.isArray(dbIds)) dbIds = [dbIds];

    // le bimObjectService
    // let c = SpinalGraphService.getRealNode(context.id.get());
    // let n = SpinalGraphService.getRealNode(node.id.get());

    let contextId = context.id.get();
    let parentId = node.id.get();

    dbIds.forEach(element => {
      // bimobjService.addBIMObject(c, n, element.dbId, element.name);
      window.spinal.BimObjectService.addBIMObject(contextId, parentId, element.dbId, element.name, model);
    });
  },

  _getReferenceContextName(nodeId) {
    let node = _spinalEnvViewerGraphService.SpinalGraphService.getInfo(nodeId);

    switch (node.type.get()) {
      case constants.SITE_TYPE:
        return {
          name: constants.SITE_REFERENCE_CONTEXT,
          relation: constants.SITE_RELATION
        };
      case constants.BUILDING_TYPE:
        return {
          name: constants.BUILDING_REFERENCE_CONTEXT,
          relation: constants.BUILDING_RELATION
        };

      case constants.FLOOR_TYPE:
        return {
          name: constants.FLOOR_REFERENCE_CONTEXT,
          relation: constants.FLOOR_RELATION
        };

      case constants.ZONE_TYPE:
        return {
          name: constants.ZONE_REFERENCE_CONTEXT,
          relation: constants.ZONE_RELATION
        };

      case constants.ROOM_TYPE:
        return {
          name: constants.ROOM_REFERENCE_CONTEXT,
          relation: constants.ROOM_RELATION
        };

      default:
        return undefined;
    }
  },

  /**
   *
   * @param {string} nodeId
   */
  addToReferenceContext(nodeId) {
    let obj = this._getReferenceContextName(nodeId);

    if (typeof obj !== "undefined") {
      let context = _spinalEnvViewerGraphService.SpinalGraphService.getContext(obj.name);

      if (typeof context !== "undefined") {

        return _spinalEnvViewerGraphService.SpinalGraphService.addChild(context.info.id.get(), nodeId, obj.relation, _spinalEnvViewerGraphService.SPINAL_RELATION_LST_PTR_TYPE);
      }

      return _spinalEnvViewerGraphService.SpinalGraphService.addContext(obj.name, obj.name.replace(".", ""), new _spinalCoreConnectorjs_type.Model({
        name: obj.name
      })).then(c => {
        return _spinalEnvViewerGraphService.SpinalGraphService.addChild(c.info.id.get(), nodeId, obj.relation, _spinalEnvViewerGraphService.SPINAL_RELATION_LST_PTR_TYPE);
      });
    }
  },

  /**
   *
   * @param {string} contextId
   */
  addContextToReference(contextId) {
    let context = _spinalEnvViewerGraphService.SpinalGraphService.getRealNode(contextId);

    if (typeof context !== "undefined") {
      return context.forEach(constants.GEOGRAPHIC_RELATIONS, node => {
        _spinalEnvViewerGraphService.SpinalGraphService._addNode(node);
        this.addToReferenceContext(node.info.id.get());
      });
    }
  }

};

exports.default = GeographicContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,